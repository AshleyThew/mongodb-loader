name: Release Plugin

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Get latest mongodb-driver-bom version
        id: get_bom_version
        run: |
          latest_bom_version=$(curl -s https://repo1.maven.org/maven2/org/mongodb/mongodb-driver-bom/maven-metadata.xml | grep -oPm1 "(?<=<latest>)[^<]+")
          echo "::set-output name=bom_version::$latest_bom_version"

      - name: Check if release exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=${{ steps.get_bom_version.outputs.bom_version }}
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag")
          if echo "$response" | grep -q '"id":'; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete old release and tag if exists and push
        if: steps.check_release.outputs.exists == 'true' && github.event_name == 'push'
        uses: actions/github-script@v4
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = '${{ steps.get_bom_version.outputs.bom_version }}';
            console.log('DEBUG: Deleting release and tag for', tag);
            // Get the release by tag
            let release;
            try {
              release = await github.repos.getReleaseByTag({
                owner: owner,
                repo: repo,
                tag: tag
              });
              console.log('DEBUG: Release found:', release.data.id);
            } catch (e) {
              console.log('DEBUG: Release not found:', e.message);
              // Release does not exist
              return;
            }
            // Delete the release
            try {
              await github.repos.deleteRelease({
                owner: owner,
                repo: repo,
                release_id: release.data.id
              });
              console.log('DEBUG: Release deleted:', release.data.id);
            } catch (e) {
              console.log('DEBUG: Error deleting release:', e.message);
            }
            // Delete the tag
            try {
              await github.git.deleteRef({
                owner: owner,
                repo: repo,
                ref: `tags/${tag}`
              });
              console.log('DEBUG: Tag deleted:', tag);
            } catch (e) {
              console.log('DEBUG: Error deleting tag (may not exist):', e.message);
              // Tag may not exist, ignore
            }

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: gradle build "-Pbom_version=${{ steps.get_bom_version.outputs.bom_version }}"

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.exists == 'false' || github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_bom_version.outputs.bom_version }}
          release_name: Release ${{ steps.get_bom_version.outputs.bom_version }}
          draft: false
          prerelease: false

      - name: Create GitHub Issue to upload to dev.bukkit.org
        if: steps.create_release.outcome == 'success'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueTitle = `Upload mongodb-loader-${{ steps.get_bom_version.outputs.bom_version }} to dev.bukkit.org`;
            const issueBody = `Please upload the new version (mongodb-loader-${{ steps.get_bom_version.outputs.bom_version }}.jar) to dev.bukkit.org.\n\n- [ ] Upload the JAR to dev.bukkit.org\n- [ ] Fill out the changelog and version details\n\n**Deadline:** ${(new Date(Date.now() + 24*60*60*1000)).toISOString().split('T')[0]}\n\nThis issue was automatically created by the release workflow.`;
            const assignees = ['Dablakbandit'];
            await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              assignees: assignees
            });

      - name: Upload JAR to Release
        if: steps.check_release.outputs.exists == 'false' || github.event_name == 'push'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/mongodb-loader-${{ steps.get_bom_version.outputs.bom_version }}.jar
          asset_name: mongodb-loader-${{ steps.get_bom_version.outputs.bom_version }}.jar
          asset_content_type: application/java-archive
